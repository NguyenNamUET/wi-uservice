from src.ml_models import result
from src.ml_models import validator
#from sklearn.base import BaseEstimator
{{#models}}
{{#model}}
from .{{classFilename}}_estimator import WiEstimator

{{classname}}Parameters = [
    {{#vars}}
    {
        "name": "{{name}}",
        "type": {{dataType}}
    },
    {{/vars}}
]

class {{classname}}Validator(validator.BaseValidator):
    def __init__(self, **kwargs):
        self.props = {{classname}}Parameters
        validator.BaseValidator.doInit(self, **kwargs)

    def __call__(self):
        return_params = super({{classname}}Validator, self).__call__()
        # additional validation goes here
        return return_params

class {{classname}}Result(result.SuccessResult):
    def __init__(self, *args, **kwargs):
        super({{classname}}Result, self).__init__()
        for key, value in kwargs:
            self.add(key, value)

class {{classname}}Estimator(WiEstimator):
    pass
    #def __init__(self):
    #    self.estimator = WiEstimator();
    #def fit(self, X, y, *args):
    #    self.estimator.fit()
{{/model}}
{{/models}}
