# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class HuberParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, epsilon=None, max_iter=None, alpha=None, tol=None):  # noqa: E501
        """HuberParameter - a model defined in OpenAPI

        :param epsilon: The epsilon of this HuberParameter.  # noqa: E501
        :type epsilon: float
        :param max_iter: The max_iter of this HuberParameter.  # noqa: E501
        :type max_iter: int
        :param alpha: The alpha of this HuberParameter.  # noqa: E501
        :type alpha: float
        :param tol: The tol of this HuberParameter.  # noqa: E501
        :type tol: float
        """
        self.openapi_types = {
            'epsilon': 'float',
            'max_iter': 'int',
            'alpha': 'float',
            'tol': 'float'
        }

        self.attribute_map = {
            'epsilon': 'epsilon',
            'max_iter': 'max_iter',
            'alpha': 'alpha',
            'tol': 'tol'
        }

        self._epsilon = epsilon
        self._max_iter = max_iter
        self._alpha = alpha
        self._tol = tol

    @classmethod
    def from_dict(cls, dikt) -> 'HuberParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HuberParameter of this HuberParameter.  # noqa: E501
        :rtype: HuberParameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def epsilon(self):
        """Gets the epsilon of this HuberParameter.


        :return: The epsilon of this HuberParameter.
        :rtype: float
        """
        return self._epsilon

    @epsilon.setter
    def epsilon(self, epsilon):
        """Sets the epsilon of this HuberParameter.


        :param epsilon: The epsilon of this HuberParameter.
        :type epsilon: float
        """

        self._epsilon = epsilon

    @property
    def max_iter(self):
        """Gets the max_iter of this HuberParameter.


        :return: The max_iter of this HuberParameter.
        :rtype: int
        """
        return self._max_iter

    @max_iter.setter
    def max_iter(self, max_iter):
        """Sets the max_iter of this HuberParameter.


        :param max_iter: The max_iter of this HuberParameter.
        :type max_iter: int
        """

        self._max_iter = max_iter

    @property
    def alpha(self):
        """Gets the alpha of this HuberParameter.


        :return: The alpha of this HuberParameter.
        :rtype: float
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this HuberParameter.


        :param alpha: The alpha of this HuberParameter.
        :type alpha: float
        """

        self._alpha = alpha

    @property
    def tol(self):
        """Gets the tol of this HuberParameter.


        :return: The tol of this HuberParameter.
        :rtype: float
        """
        return self._tol

    @tol.setter
    def tol(self, tol):
        """Sets the tol of this HuberParameter.


        :param tol: The tol of this HuberParameter.
        :type tol: float
        """

        self._tol = tol
