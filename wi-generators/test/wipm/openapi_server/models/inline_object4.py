# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineObject4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_id=None, features=None):  # noqa: E501
        """InlineObject4 - a model defined in OpenAPI

        :param model_id: The model_id of this InlineObject4.  # noqa: E501
        :type model_id: str
        :param features: The features of this InlineObject4.  # noqa: E501
        :type features: Features
        """
        self.openapi_types = {
            'model_id': 'str',
            'features': 'Features'
        }

        self.attribute_map = {
            'model_id': 'model_id',
            'features': 'features'
        }

        self._model_id = model_id
        self._features = features

    @classmethod
    def from_dict(cls, dikt) -> 'InlineObject4':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_object_4 of this InlineObject4.  # noqa: E501
        :rtype: InlineObject4
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_id(self):
        """Gets the model_id of this InlineObject4.


        :return: The model_id of this InlineObject4.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this InlineObject4.


        :param model_id: The model_id of this InlineObject4.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def features(self):
        """Gets the features of this InlineObject4.


        :return: The features of this InlineObject4.
        :rtype: Features
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this InlineObject4.


        :param features: The features of this InlineObject4.
        :type features: Features
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features
