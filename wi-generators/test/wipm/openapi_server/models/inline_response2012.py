# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineResponse2012(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mean_absolute_error=None, val_loss=None, train_loss=None, mean_squared_error=None, message=None, status=None):  # noqa: E501
        """InlineResponse2012 - a model defined in OpenAPI

        :param mean_absolute_error: The mean_absolute_error of this InlineResponse2012.  # noqa: E501
        :type mean_absolute_error: float
        :param val_loss: The val_loss of this InlineResponse2012.  # noqa: E501
        :type val_loss: Curve
        :param train_loss: The train_loss of this InlineResponse2012.  # noqa: E501
        :type train_loss: Curve
        :param mean_squared_error: The mean_squared_error of this InlineResponse2012.  # noqa: E501
        :type mean_squared_error: float
        :param message: The message of this InlineResponse2012.  # noqa: E501
        :type message: str
        :param status: The status of this InlineResponse2012.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'mean_absolute_error': 'float',
            'val_loss': 'Curve',
            'train_loss': 'Curve',
            'mean_squared_error': 'float',
            'message': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'mean_absolute_error': 'mean_absolute_error',
            'val_loss': 'val_loss',
            'train_loss': 'train_loss',
            'mean_squared_error': 'mean_squared_error',
            'message': 'message',
            'status': 'status'
        }

        self._mean_absolute_error = mean_absolute_error
        self._val_loss = val_loss
        self._train_loss = train_loss
        self._mean_squared_error = mean_squared_error
        self._message = message
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2012':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_201_2 of this InlineResponse2012.  # noqa: E501
        :rtype: InlineResponse2012
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mean_absolute_error(self):
        """Gets the mean_absolute_error of this InlineResponse2012.


        :return: The mean_absolute_error of this InlineResponse2012.
        :rtype: float
        """
        return self._mean_absolute_error

    @mean_absolute_error.setter
    def mean_absolute_error(self, mean_absolute_error):
        """Sets the mean_absolute_error of this InlineResponse2012.


        :param mean_absolute_error: The mean_absolute_error of this InlineResponse2012.
        :type mean_absolute_error: float
        """

        self._mean_absolute_error = mean_absolute_error

    @property
    def val_loss(self):
        """Gets the val_loss of this InlineResponse2012.


        :return: The val_loss of this InlineResponse2012.
        :rtype: Curve
        """
        return self._val_loss

    @val_loss.setter
    def val_loss(self, val_loss):
        """Sets the val_loss of this InlineResponse2012.


        :param val_loss: The val_loss of this InlineResponse2012.
        :type val_loss: Curve
        """

        self._val_loss = val_loss

    @property
    def train_loss(self):
        """Gets the train_loss of this InlineResponse2012.


        :return: The train_loss of this InlineResponse2012.
        :rtype: Curve
        """
        return self._train_loss

    @train_loss.setter
    def train_loss(self, train_loss):
        """Sets the train_loss of this InlineResponse2012.


        :param train_loss: The train_loss of this InlineResponse2012.
        :type train_loss: Curve
        """

        self._train_loss = train_loss

    @property
    def mean_squared_error(self):
        """Gets the mean_squared_error of this InlineResponse2012.


        :return: The mean_squared_error of this InlineResponse2012.
        :rtype: float
        """
        return self._mean_squared_error

    @mean_squared_error.setter
    def mean_squared_error(self, mean_squared_error):
        """Sets the mean_squared_error of this InlineResponse2012.


        :param mean_squared_error: The mean_squared_error of this InlineResponse2012.
        :type mean_squared_error: float
        """

        self._mean_squared_error = mean_squared_error

    @property
    def message(self):
        """Gets the message of this InlineResponse2012.


        :return: The message of this InlineResponse2012.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse2012.


        :param message: The message of this InlineResponse2012.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def status(self):
        """Gets the status of this InlineResponse2012.


        :return: The status of this InlineResponse2012.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2012.


        :param status: The status of this InlineResponse2012.
        :type status: str
        """
        allowed_values = ["started", "pending", "success", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
